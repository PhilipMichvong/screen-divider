import os
import customtkinter as ctk
from tkinter import filedialog
import tkinter.messagebox as messagebox
from screeninfo import get_monitors
import ctypes


class AppManager:
    def __init__(self):
        self.monitors = get_monitors()
        self.selected_monitor = 0
        self.apps = []
        self.layout = "horizontal"  # Default layout

    def calculate_regions(self, split_count):
        monitor = self.monitors[self.selected_monitor]
        screen_width, screen_height = monitor.width, monitor.height

        regions = []
        if self.layout == "horizontal":
            region_width = screen_width // split_count
            for i in range(split_count):
                regions.append((i * region_width, 0, region_width, screen_height))
        elif self.layout == "vertical":
            region_height = screen_height // split_count
            for i in range(split_count):
                regions.append((0, i * region_height, screen_width, region_height))
        return regions

    def generate_powershell_script(self, script_name="WorkFlow.ps1"):
        regions = self.calculate_regions(len(self.apps))
        ps_script = []

        ps_script.append("# PowerShell script generated by Screen Divider")
        ps_script.append(f"# Selected monitor: {self.monitors[self.selected_monitor].width}x{self.monitors[self.selected_monitor].height}")
        ps_script.append("")
        
        # Add necessary assemblies and functions
        ps_script.extend([
            "Add-Type @\"",
            "    using System;",
            "    using System.Runtime.InteropServices;",
            "    public class Win32 {",
            "        [DllImport(\"user32.dll\")]",
            "        public static extern bool MoveWindow(IntPtr hWnd, int X, int Y, int nWidth, int nHeight, bool bRepaint);",
            "        [DllImport(\"user32.dll\")]",
            "        public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);",
            "        [DllImport(\"user32.dll\")]",
            "        public static extern IntPtr SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int X, int Y, int cx, int cy, uint uFlags);",
            "    }",
            "\"@",
            "",
            "# Constants for window manipulation",
            "$SW_RESTORE = 9",
            "$HWND_TOP = New-Object -TypeName System.IntPtr -ArgumentList 0",
            "$SWP_SHOWWINDOW = 0x0040",
            "",
            "function Wait-ForWindow {",
            "    param($processId, $timeoutSeconds = 10)",
            "    $sw = [System.Diagnostics.Stopwatch]::StartNew()",
            "    while ($sw.ElapsedMilliseconds -lt ($timeoutSeconds * 1000)) {",
            "        $process = Get-Process -Id $processId -ErrorAction SilentlyContinue",
            "        if ($process -and $process.MainWindowHandle -ne 0) {",
            "            return $process.MainWindowHandle",
            "        }",
            "        Start-Sleep -Milliseconds 100",
            "    }",
            "    throw 'Timeout waiting for window handle'",
            "}",
            ""
        ])

        for app, region in zip(self.apps, regions):
            if app:
                x, y, width, height = region
                app_path = app.replace('\\', '\\\\')
                
                ps_script.extend([
                    f'$process = Start-Process -FilePath "{app_path}" -PassThru',
                    "",
                    "# Wait for window and get handle",
                    "try {",
                    "    $hwnd = Wait-ForWindow -processId $process.Id -timeoutSeconds 10",
                    "    if ($hwnd) {",
                    "        # Restore window if minimized",
                    "        [Win32]::ShowWindow($hwnd, $SW_RESTORE)",
                    "        Start-Sleep -Milliseconds 500",
                    "",
                    "        # Set window position and size",
                    f"        [Win32]::SetWindowPos($hwnd, $HWND_TOP, {x}, {y}, {width}, {height}, $SWP_SHOWWINDOW)",
                    f"        [Win32]::MoveWindow($hwnd, {x}, {y}, {width}, {height}, $true)",
                    "        Write-Host 'Successfully positioned window'",
                    "    } else {",
                    "        Write-Host 'Failed to get window handle'",
                    "    }",
                    "} catch {",
                    "    Write-Host \"Error positioning window: $_\"",
                    "}",
                    ""
                ])

        ps_script.append('Write-Host "Workflow executed successfully!"')
        
        with open(script_name, "w") as file:
            file.write("\n".join(ps_script))
        return script_name


class GUI(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("PowerShell Workflow Generator")
        self.geometry("800x600")
        self.app_manager = AppManager()
        self.create_widgets()

    def create_widgets(self):
        # Create main container frames
        self.config_frame = ctk.CTkFrame(self)
        self.config_frame.grid(row=0, column=0, padx=20, pady=20, sticky="nsew")
        
        self.apps_frame = ctk.CTkFrame(self)
        self.apps_frame.grid(row=0, column=1, padx=20, pady=20, sticky="nsew")
        
        # Configure grid weights
        self.grid_columnconfigure(0, weight=1)
        self.grid_columnconfigure(1, weight=1)
        self.grid_rowconfigure(0, weight=1)
        
        # Configuration section
        ctk.CTkLabel(self.config_frame, text="Configuration", font=("Arial", 16, "bold")).pack(pady=10)
        
        # Monitor selection
        monitor_frame = ctk.CTkFrame(self.config_frame)
        monitor_frame.pack(fill="x", padx=10, pady=5)
        ctk.CTkLabel(monitor_frame, text="Monitor:").pack(side="left", padx=5)
        self.monitor_dropdown = ctk.CTkOptionMenu(
            monitor_frame,
            values=[f"Monitor {i + 1}: {m.width}x{m.height}" for i, m in enumerate(self.app_manager.monitors)],
            command=self.set_selected_monitor
        )
        self.monitor_dropdown.pack(side="right", padx=5)
        
        # Layout selection
        layout_frame = ctk.CTkFrame(self.config_frame)
        layout_frame.pack(fill="x", padx=10, pady=5)
        ctk.CTkLabel(layout_frame, text="Layout:").pack(side="left", padx=5)
        self.layout_dropdown = ctk.CTkOptionMenu(
            layout_frame,
            values=["horizontal", "vertical"],
            command=self.set_layout
        )
        self.layout_dropdown.pack(side="right", padx=5)
        
        # Preview canvas
        ctk.CTkLabel(self.config_frame, text="Preview", font=("Arial", 14, "bold")).pack(pady=10)
        self.canvas = ctk.CTkCanvas(self.config_frame, width=400, height=200, bg="white")
        self.canvas.pack(padx=10, pady=5)
        
        # Applications section
        ctk.CTkLabel(self.apps_frame, text="Applications", font=("Arial", 16, "bold")).pack(pady=10)
        
        # App buttons
        self.app_buttons = []
        for i in range(5):
            button_frame = ctk.CTkFrame(self.apps_frame)
            button_frame.pack(fill="x", padx=10, pady=5)
            
            button = ctk.CTkButton(
                button_frame, 
                text=f"App {i + 1}",
                command=lambda idx=i: self.choose_app(idx),
                width=200
            )
            button.pack(pady=5)
            self.app_buttons.append(button)
        
        # Generate button
        self.generate_button = ctk.CTkButton(
            self.apps_frame,
            text="Generate PowerShell Script",
            command=self.generate_script,
            fg_color="#28a745",
            hover_color="#218838"
        )
        self.generate_button.pack(pady=20)

        # Initial layout draw
        self.redraw_layout()

    def set_selected_monitor(self, choice):
        self.app_manager.selected_monitor = int(choice.split()[1].strip(":")) - 1
        self.redraw_layout()

    def set_layout(self, layout):
        self.app_manager.layout = layout
        self.redraw_layout()

    def redraw_layout(self):
        self.canvas.delete("all")
        regions = self.app_manager.calculate_regions(len(self.app_manager.apps) or 1)
        monitor = self.app_manager.monitors[self.app_manager.selected_monitor]

        # Draw monitor outline
        self.canvas.create_rectangle(0, 0, 400, 200, fill="#f8f9fa", outline="#dee2e6")

        for i, region in enumerate(regions):
            x, y, width, height = region
            # Scale to canvas size
            scale_x = 400 / monitor.width
            scale_y = 200 / monitor.height
            scaled_x, scaled_y = x * scale_x, y * scale_y
            scaled_width, scaled_height = width * scale_x, height * scale_y

            # Draw region with gradient effect
            self.canvas.create_rectangle(
                scaled_x + 2, scaled_y + 2, 
                scaled_x + scaled_width - 2, scaled_y + scaled_height - 2,
                fill="#e3f2fd" if i % 2 == 0 else "#bbdefb",
                outline="#2196f3",
                width=2
            )
            
            # Add app name if selected
            if i < len(self.app_manager.apps) and self.app_manager.apps[i]:
                app_name = os.path.basename(self.app_manager.apps[i])
                self.canvas.create_text(
                    scaled_x + scaled_width/2,
                    scaled_y + scaled_height/2,
                    text=app_name,
                    font=("Arial", 8),
                    width=scaled_width - 10
                )

    def choose_app(self, index):
        file_path = filedialog.askopenfilename(title="Choose Application", filetypes=[("Executables", "*.exe")])
        if file_path:
            while len(self.app_manager.apps) <= index:
                self.app_manager.apps.append(None)
            self.app_manager.apps[index] = file_path
            self.app_buttons[index].configure(text=os.path.basename(file_path))
            self.redraw_layout()

    def generate_script(self):
        script_name = filedialog.asksaveasfilename(defaultextension=".ps1", filetypes=[("PowerShell Script", "*.ps1")])
        if script_name:
            try:
                generated_file = self.app_manager.generate_powershell_script(script_name)
                messagebox.showinfo("Script Generated", f"PowerShell script saved as:\n{generated_file}")
            except Exception as e:
                messagebox.showerror("Error", f"Failed to generate script:\n{str(e)}")


if __name__ == "__main__":
    app = GUI()
    app.mainloop()
